#+TITLE: Test particle omeff calculations
#+BEGIN_SRC jupyter-python :session /jpy:localhost#8888:research
  import numpy as np
  import importlib
  import os
  from numpy import sqrt, cos, sin, pi, abs
  import scipy as sp
  import matplotlib as mpl
  import matplotlib.pyplot as plt
  from matplotlib.ticker import FuncFormatter
  import sys
  sys.path.append("/home/jtlaune/multi-planet-architecture/")
  import mpa
  from mpa.mpl_styles import analytic
  import mpa.series
  import mpa.fndefs as fns

  deg_conv = 180./np.pi

  def load_params(filepath):
      spec = importlib.util.spec_from_file_location("_", filepath)
      _ = importlib.util.module_from_spec(spec)
      spec.loader.exec_module(_)
      print(f"Loading run file {filepath} in directory {os.getcwd()}")
      return(np.array(_.RUN_PARAMS))
#+END_SRC

#+RESULTS:

* external -1e-4<omeff<-1e-2
** final eccentricities
#+BEGIN_SRC jupyter-python :session /jpy:localhost#8888:research
  importlib.reload(mpa.series)
  chunk = 16
  projpath = "/home/jtlaune/multi-planet-architecture/projects/omeff/tpOmEff/"

  @mpl.rc_context(analytic)
  def plot(iep):
      seriesname = "grid"
      seriesdir = os.path.join(projpath, seriesname)
      paramsname = seriesname + "-params.py"
      runpath = seriesdir
      series = mpa.series.FOomEffTPSeries(
          seriesname, runpath, load=True, verbose=True, overwrite=False, loadall=False
      )
      params = series.RUN_PARAMS
      fig, ax = plt.subplots(2, figsize=(5,10))
      ax[0].axvline(x=-(1e-4)**(2./3),ls="--",c="k",lw=2) # LER
      j = 2
      mup = 1e-4

      for i in range(iep*chunk, (iep+1)*chunk):
          prescomEff = float(params[i, -1])  # prescribed omext1
          sim = series.data[i]
          teval = sim["teval"]
          ti = int(len(teval) * 0.9)
          diffom = np.abs(sim["g2"][ti:] - sim["g1"][ti:])  # actual
          avgDom = np.average(diffom)  # average
          theta  = sim["thetap"][ti:]
          a1     = sim["a1"][ti:]
          a2     = sim["a2"][ti:]
          e1     = sim["e1"][ti:]
          e2     = sim["e2"][ti:]
          g1     = sim["g1"][ti:]
          g2     = sim["g2"][ti:]
          e1avg = np.average(e1)
          e2avg = np.average(e2)
          de2avg = np.std(e2)
          f1 = fns.f27lc(a1/a2, j)
          f2 = fns.f31lc(a1/a2, j)
          theta1 = (theta+g1)%(2*np.pi)
          theta2 = (theta+g2)%(2*np.pi)
          hattheta1 = np.arctan2(e1*sin(theta1) + f2/f1*e2*sin(theta2),
                                e1*cos(theta1) + f2/f1*e2*cos(theta2))
          inres = 1-2*np.all(np.abs(theta1) > 1.)
          widthCER = 2*(j+1)*np.sqrt(2*np.abs(f1)*mup)*e1avg**(1.5) # 0.00062
          ax[1].plot(teval[ti:], widthCER, c="k")
          print(widthCER)
          #ax[0].scatter(prescomEff, e1avg, c="k", s=10)
          ax[0].axvline(x=-0.00062,ls="--",c="b",lw=2) # CER
          ax[0].axhline(y=e1avg, lw=2, ls="--", c="k")
          example_indices = iep*chunk - 1 + np.array([0, 1, 10, 11, 12, 16]) 
          ax[0].errorbar(prescomEff, inres*e2avg, c="r", ms=5, capsize=5, yerr=de2avg)

          if i in example_indices:
              ax[0].errorbar(prescomEff, inres*e2avg, c="r", ms=20, capsize=5, marker="*", yerr=de2avg)
          #example_mask = np.zeros(Nqs) > 1 # initialize false
          #for ind in example_indices: example_mask[ind] = True # switch to true
          #ax[0].scatter(prescomEff[example_mask], inres[example_mask]*e2avg[example_mask], c="r", s=80, marker="*")
          # ax[0].scatter(prescomEff, avgDom, c="r", s=20)
          # ax[0].scatter(teval, diffom, c="k", s=10)

      ax[0].set_ylim(0., 0.1)
      ax[0].text(0.1, 0.9, r"$e_p=$"+f"{e1avg:0.2e}", transform=ax[0].transAxes, fontsize=16)
      ax[0].legend()
      ax[0].set_title(
          r"Final $e$ values for varying $\dot\varpi_{\rm eff}$", pad=20
      )
      ax[0].set_xlabel(r"$\dot\varpi_{\rm eff}$")
      ax[0].set_ylabel(r"final eccentricity (numerical)")
      figfp = os.path.join(seriesdir, f"images/external-tp-ep{e1avg:0.2f}.png")
      fig.subplots_adjust(hspace=1)
      ax[1].set_title("CER resonance width at the end of the simulation")
      ax[1].set_xlabel("t [orbits]")
      fig.savefig(os.path.join(projpath, figfp), bbox_inches="tight")

  for iep in [2]: plot(iep)
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
  [0.00062443 0.00062442 0.00062442 ... 0.00062462 0.00062462 0.00062462]
  [0.00062438 0.00062439 0.0006244  ... 0.00062462 0.00062463 0.00062463]
  [0.00062457 0.00062456 0.00062455 ... 0.00062466 0.00062466 0.00062466]
  [0.00062411 0.00062411 0.00062411 ... 0.00062455 0.00062454 0.00062452]
  [0.00062402 0.00062403 0.00062403 ... 0.00062446 0.00062444 0.00062442]
  [0.00062389 0.00062389 0.0006239  ... 0.00062388 0.00062388 0.00062389]
  [0.00062416 0.00062419 0.00062422 ... 0.00062393 0.00062391 0.00062389]
  [0.00062811 0.00062815 0.00062819 ... 0.0006237  0.00062348 0.00062327]
  [0.00062528 0.00062525 0.00062521 ... 0.00062538 0.00062535 0.00062532]
  [0.00062602 0.00062629 0.00062655 ... 0.00062796 0.00062779 0.00062761]
  [0.00062706 0.00062719 0.00062731 ... 0.00062271 0.00062249 0.00062228]
  [0.00062324 0.00062322 0.00062321 ... 0.00062075 0.00062058 0.00062042]
  No handles with labels found to put in legend.
  [0.00063332 0.00063328 0.00063321 ... 0.0006191  0.0006193  0.00061952]
  [0.00062313 0.00062347 0.0006238  ... 0.00062569 0.00062575 0.00062579]
  [0.0006181  0.00061786 0.00061763 ... 0.00061771 0.00061795 0.00061819]
  [0.00061899 0.00061919 0.00061936 ... 0.00061979 0.00061987 0.00061992]
#+end_example
#+attr_org: :width 565
[[file:./.ob-jupyter/b56a83cefffab084bfce8261f406e1a6c7f10982.png]]
:END:
* external -1e-4<omeff<-1e-2, e_p = 0.03 
** phase space paths
#+BEGIN_SRC jupyter-python :session /jpy:localhost#8888:research
  importlib.reload(mpa.series)
  Nqs = 17
  projpath = "/home/jtlaune/multi-planet-architecture/projects/omeff/tpOmEff"


  @mpl.rc_context(analytic)
  def plot(iep):
      seriesname = "cutoff"
      #seriesdir = os.path.join(projpath, seriesname)
      seriesdir = projpath
      paramsname = seriesname + "-params.py"
      runpath = seriesdir
      series = mpa.series.FOomEffTPSeries(
          seriesname, runpath, load=True, verbose=True, overwrite=False, loadall=False
      )
      params = series.RUN_PARAMS
      j = 2

      #for i in range(iep * chunk, (iep) * chunk + 1):  # for dev
      for i in range(Nqs): # gen all
          prescomEff = float(params[i, -1])  # prescribed omext1
          print(prescomEff)
          sim = series.data[i]
          teval = sim["teval"]
          # ti = int(len(teval) * 0.9)
          ti = 0  # all of it
          diffom = np.abs(sim["g2"][ti:] - sim["g1"][ti:])  # actual
          avgDom = np.average(diffom)  # average
          theta = sim["thetap"][ti:]
          a1 = sim["a1"][ti:]
          a2 = sim["a2"][ti:]
          e1 = sim["e1"][ti:]
          e2 = sim["e2"][ti:]
          g1 = sim["g1"][ti:]
          g2 = sim["g2"][ti:]
          Dpom = g2 - g1  # pom_1-pom_2
          e1avg = np.average(e1)
          e2avg = np.average(e2)
          f1 = fns.f27lc(a1 / a2, j)
          f2 = fns.f31lc(a1 / a2, j)
          theta1 = (theta + g1) % (2 * np.pi)
          theta2 = (theta + g2) % (2 * np.pi)
          hattheta1 = np.arctan2(
              e1 * sin(theta1) + f2 / f1 * e2 * sin(theta2),
              e1 * cos(theta1) + f2 / f1 * e2 * cos(theta2),
          )
          inres = 1 - 2 * np.all(np.abs(theta1) > 1.0)

          fig, ax = plt.subplots(3, figsize=(5, 13))

          ehat = sqrt(
              f1**2 * e1**2
              - np.abs(f1 * f2) * e1 * e2 * cos(Dpom)
              + f2**2 * e2**2
          )

          # ax.scatter(prescomEff, e1avg, c="k", s=10)
          # ax.axhline(y=e1avg, lw=2, ls="--", c="k")
          # ax.scatter(prescomEff, inres*e2avg, c="r", s=20)
          # ax.scatter(prescomEff, avgDom, c="r", s=20)
          # ax.scatter(teval, diffom, c="k", s=10)
          e1cosThp = e1 * cos(theta1)
          e2cosTh = e2 * cos(theta2)
          e1sinThp = e1 * sin(theta1)
          e2sinTh = e2 * sin(theta2)
          ehatcosThhat = ehat * cos(hattheta1)
          ehatsinThhat = ehat * sin(hattheta1)

          plotsx = [e2cosTh, ehatcosThhat, teval[ti:]]
          plotsy = [e2sinTh, ehatsinThhat, theta2*180./np.pi]
          labsx = [
              r"$e\cos\theta$",
              r"$\hat e\cos\hat\theta$",
              r"orbits [$P_p$]",
          ]
          labsy = [
              r"$e\sin\theta$",
              r"$\hat e\sin\hat\theta$",
              r"$\theta_p$",
          ]

          for jax, axis in enumerate(ax):
              if jax in [0,1]:
                  im = axis.scatter(plotsx[jax], plotsy[jax], c=teval[ti:],s=0.5,alpha=0.2)
                  axis.set_xlabel(labsx[jax])
                  axis.set_ylabel(labsy[jax])
                  axis.scatter(0, 0, s=40, c="red")
                  axis.axvline(0, ls="--", c="red", lw="1.5")
                  axis.axhline(0, ls="--", c="red", lw="1.5")
              if jax in [0]:
                  axis.set_xlim((-0.075,0.075))
                  axis.set_ylim((-0.075,0.075))
              if jax in [1]:
                  axis.set_xlim((-0.15,0.15))
                  axis.set_ylim((-0.15,0.15))
              if jax in [2]:
                  axis.set_xlim((teval[ti], teval[-1]))
                  axis.set_ylim((0,360))
                  im = axis.scatter(plotsx[jax], plotsy[jax], c=teval[ti:],s=0.5,alpha=0.2)
                  axis.set_xlabel(labsx[jax])
                  axis.set_ylabel(labsy[jax])

          ax[0].set_title(
              r"$e_p=$"
              + f"{e1avg:0.2f}\n"
              + r"$\dot\varpi_{\rm eff}=$"
              + f"${prescomEff:0.2e} n_p$",
              pad=20,
          )
          # ax[0].text(0.1, 0.9, r"$e_p=$"+f"{e1avg:0.2f}", transform=ax[0].transAxes, fontsize=16)
          # ax[0].set_ylim(0., 0.1)
          # ax[0].legend()
          # ax[0].set_xlabel(r"$\dot\varpi_{\rm eff}$")
          # ax[0].set_ylabel(r"final eccentricity (numerical)")
          fig.subplots_adjust(right=0.8)
          fmt = lambda x, pos: f"{x:0.1E} $P_p$"
          cbar_ax = fig.add_axes([0.85, 0.15, 0.05, 0.7])
          cbar = fig.colorbar(
              im, cax=cbar_ax, format=FuncFormatter(fmt)
          )  # im will be the last row by default, i.e. cb will correspond to last row

          fig.subplots_adjust(hspace=0.3)
          figfp = os.path.join(seriesdir, f"images/{str(i).zfill(4)}-external-tp-ep{e1avg:0.2f}-omeff{prescomEff:0.3e}-phasepath.png")
          fig.savefig(os.path.join(projpath, figfp), bbox_inches="tight")


  plot(2)
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
  0.0
  -0.0001
  -0.00013593563908785255
  -0.00018478497974222906
  -0.00025118864315095795
  -0.0003414548873833601
  -0.00046415888336127773
  -0.000630957344480193
  -0.0008576958985908946
  -0.0011659144011798312
  -0.001584893192461114
  -0.002154434690031882
  -0.0029286445646252374
  -0.003981071705534973
  -0.0054116952654646375
  -0.007356422544596414
  -0.01
#+end_example
#+attr_org: :width 517
[[file:./.ob-jupyter/a65f36dfe71ac0ef6c80ffa07dc3fbe92346f2a5.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/0ce07591c386a474edeec77515c447d353df2ea8.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/5b26e06b42118ab30f2256b4c11d115c56de6aef.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/dc8b73380cae8645a3d5e9d46c03170264928784.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/846ddc8c87abc9b929d1d08d2cfd58d433a5167b.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/939559120d61c9d1174e19cd68a67f6756018e14.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/e80612e148ef43a6e1f10c7ba9a0b1ebd40423dd.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/b9d974e496708a1f87fc8dba2b126dcc599ffd33.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/fdee50b013bc066dd826af6ac33fb8fb56cc3978.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/a23971e861fd6825dcdd1fce71e102cc1c457795.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/dd287ab4d5e851145a884d119f1fd6e5b1c5eab1.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/5dd6a010b94f6ff88352b4570f1f61a48c32d7fb.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/5867c41cae144fed43d3a15207acc16d307b55bf.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/61a3fb1c66cc1f9f4d93b3f379d4e027bc759996.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/eeaf162ba792548c106fe84cb55b4c8f97c2cad9.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/7e92c0154184d1d1da06e5de36d839c546798d75.png]]
#+attr_org: :width 517
[[file:./.ob-jupyter/f5ff0f923174961ba6f80e830c33f52b081a0d9d.png]]
:END:
