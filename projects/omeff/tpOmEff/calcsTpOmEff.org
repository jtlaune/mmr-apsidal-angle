#+TITLE: Test particle omeff calculations
#+BEGIN_SRC jupyter-python :session /jpy:localhost#8888:research
  import numpy as np
  import importlib
  import os
  from numpy import sqrt, cos, sin, pi, abs
  import scipy as sp
  import matplotlib as mpl
  import matplotlib.pyplot as plt
  import sys
  sys.path.append("/home/jtlaune/multi-planet-architecture/")
  from mpa.mpl_styles import analytic
  from mpa.series import FOomEffTPSeries

  deg_conv = 180./np.pi

  def load_params(filepath):
      spec = importlib.util.spec_from_file_location("_", filepath)
      _ = importlib.util.module_from_spec(spec)
      spec.loader.exec_module(_)
      print(f"Loading run file {filepath} in directory {os.getcwd()}")
      return(np.array(_.RUN_PARAMS))
#+END_SRC

#+RESULTS:

* external 1e-4<omeff<1e-2
*** final eccentricities
#+BEGIN_SRC jupyter-python :session /jpy:localhost#8888:research
  @mpl.rc_context(analytic)
  def plot():
      projpath = "/home/jtlaune/multi-planet-architecture/projects/omeff/"
      seriesname = "tpOmEff"
      seriesdir = os.path.join(projpath, seriesname)
      paramsname = seriesname + "-params.py"
      runpath = seriesdir
      series = FOomEffTPSeries(
          seriesname, runpath, load=True, verbose=True, overwrite=False, loadall=False
      )
      params = series.RUN_PARAMS
      fig, ax = plt.subplots()
      ax.axvline(x=-(1e-4)**(2./3),ls="--",c="k",lw=2)

      for i in range(64, 79):
          prescomEff = float(params[i, -1])  # prescribed omext1
          sim = series.data[i]
          teval = sim["teval"]
          ti = int(len(teval) * 0.9)
          diffom = np.abs(sim["g2"][ti:] - sim["g1"][ti:])  # actual
          avgDom = np.average(diffom)  # average
          e1 = sim["e1"][ti:]
          e2 = sim["e2"][ti:]
          e1avg = np.average(e1)
          e2avg = np.average(e2)
          print(prescomEff)
          ax.scatter(prescomEff, e1avg, c="k", s=10)
          ax.scatter(prescomEff, e2avg, c="r", s=10)
          # ax.scatter(prescomEff, avgDom, c="r", s=20)
          # ax.scatter(teval, diffom, c="k", s=10)

      ax.legend()
      figfp = os.path.join(seriesdir, "final-ecc-states.png")
      fig.savefig(figfp, bbox_inches="tight")
      ax.set_title(
          r"Final $e_1$, $e_2$ values for varying $\dot\varpi_{\rm eff}$", pad=20
      )
      ax.set_xlabel(r"$\dot\varpi_{1,\rm ext}$")
      ax.set_ylabel(r"final eccentricity")


  plot()
#+END_SRC

#+RESULTS:
:RESULTS:
#+begin_example
  Cannot find file 0052-mup1.00e-04-omeff0.00e+00.npz... have you run it?
  Cannot find file 0077-mup1.00e-04-omeff0.00e+00.npz... have you run it?
  Cannot find file 0079-mup1.00e-04-omeff0.00e+00.npz... have you run it?
  Cannot find file 0089-mup1.00e-04-omeff0.00e+00.npz... have you run it?
  Cannot find file 0095-mup1.00e-04-omeff0.00e+00.npz... have you run it?
  -0.0001
  -0.00013593563908785255
  -0.00018478497974222906
  -0.00025118864315095795
  -0.0003414548873833601
  -0.00046415888336127773
  -0.000630957344480193
  -0.0008576958985908946
  -0.0011659144011798312
  -0.001584893192461114
  -0.002154434690031882
  -0.0029286445646252374
  -0.003981071705534973
#+end_example
# [goto error]
#+begin_example
  [0;31m---------------------------------------------------------------------------[0m
  [0;31mTypeError[0m                                 Traceback (most recent call last)
  [0;32m/tmp/ipykernel_22220/2741807445.py[0m in [0;36m<module>[0;34m[0m
  [1;32m     40[0m [0;34m[0m[0m
  [1;32m     41[0m [0;34m[0m[0m
  [0;32m---> 42[0;31m [0mplot[0m[0;34m([0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
  [0m
  [0;32m~/miniconda3/envs/science/lib/python3.9/contextlib.py[0m in [0;36minner[0;34m(*args, **kwds)[0m
  [1;32m     77[0m         [0;32mdef[0m [0minner[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwds[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
  [1;32m     78[0m             [0;32mwith[0m [0mself[0m[0;34m.[0m[0m_recreate_cm[0m[0;34m([0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
  [0;32m---> 79[0;31m                 [0;32mreturn[0m [0mfunc[0m[0;34m([0m[0;34m*[0m[0margs[0m[0;34m,[0m [0;34m**[0m[0mkwds[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
  [0m[1;32m     80[0m         [0;32mreturn[0m [0minner[0m[0;34m[0m[0;34m[0m[0m
  [1;32m     81[0m [0;34m[0m[0m

  [0;32m/tmp/ipykernel_22220/2741807445.py[0m in [0;36mplot[0;34m()[0m
  [1;32m     16[0m         [0mprescomEff[0m [0;34m=[0m [0mfloat[0m[0;34m([0m[0mparams[0m[0;34m[[0m[0mi[0m[0;34m,[0m [0;34m-[0m[0;36m1[0m[0;34m][0m[0;34m)[0m  [0;31m# prescribed omext1[0m[0;34m[0m[0;34m[0m[0m
  [1;32m     17[0m         [0msim[0m [0;34m=[0m [0mseries[0m[0;34m.[0m[0mdata[0m[0;34m[[0m[0mi[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
  [0;32m---> 18[0;31m         [0mteval[0m [0;34m=[0m [0msim[0m[0;34m[[0m[0;34m"teval"[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
  [0m[1;32m     19[0m         [0mti[0m [0;34m=[0m [0mint[0m[0;34m([0m[0mlen[0m[0;34m([0m[0mteval[0m[0;34m)[0m [0;34m*[0m [0;36m0.9[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
  [1;32m     20[0m         [0mdiffom[0m [0;34m=[0m [0mnp[0m[0;34m.[0m[0mabs[0m[0;34m([0m[0msim[0m[0;34m[[0m[0;34m"g2"[0m[0;34m][0m[0;34m[[0m[0mti[0m[0;34m:[0m[0;34m][0m [0;34m-[0m [0msim[0m[0;34m[[0m[0;34m"g1"[0m[0;34m][0m[0;34m[[0m[0mti[0m[0;34m:[0m[0;34m][0m[0;34m)[0m  [0;31m# actual[0m[0;34m[0m[0;34m[0m[0m

  [0;31mTypeError[0m: 'NoneType' object is not subscriptable
#+end_example
#+attr_org: :width 440
[[file:./.ob-jupyter/57735a0b39b4c5c3b1454337a6a1672025feabf2.png]]
:END:
