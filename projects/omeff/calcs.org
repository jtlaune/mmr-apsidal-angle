#+BEGIN_SRC jupyter-python :session /jpy:localhost#8888:research
  import numpy as np
  import os
  from numpy import sqrt, cos, sin, pi, abs
  import scipy as sp
  import scipy.optimize
  import matplotlib as mpl
  import matplotlib.pyplot as plt
  from matplotlib.ticker import MaxNLocator
  from matplotlib.ticker import ScalarFormatter
  import sys
  sys.path.append("/home/jtlaune/multi-planet-architecture/")
  from helper import *
  from plotting import *
  import importlib
  import os
  import seaborn as sns
  from scipy.ndimage import uniform_filter1d
  j = 2
  plt.rcParams.update({"font.size": 20,
                       "figure.facecolor": "white",
                       "figure.figsize": (6,6),
                       #'font.family': 'serif',
                       #"font.serif": ["DejaVu Serif"],
                       #"text.usetex": False,
                       "axes.linewidth": 3,
                       'font.family': 'lmodern',
                       'text.usetex': True,
                       'text.latex.preamble': (            # LaTeX preamble
                           r'\usepackage{lmodern}'
                           # ... more packages if needed
                       )
                       })
  # Create an array with the colors you want to use
  #colors = ["#FF0B04", "#4374B3"]# Set your custom color palette
  #sns.set_palette("dark")

  pal = sns.color_palette("colorblind").as_hex()
  blue = pal[0]
  orange = pal[3]
  palette = [blue, orange, *pal[1:2], *pal[4:]]
  print(palette)
  sns.set_palette(sns.color_palette(palette))

  # important constants
  deg_conv = 180./np.pi
  
  def load_params(filepath):
      spec = importlib.util.spec_from_file_location("_", filepath)
      _ = importlib.util.module_from_spec(spec)
      spec.loader.exec_module(_)
      print(f"Loading run file {filepath} in directory {os.getcwd()}")
      return(np.array(_.RUN_PARAMS))
#+END_SRC

#+RESULTS:
: ['#0173b2', '#d55e00', '#de8f05', '#cc78bc', '#ca9161', '#fbafe4', '#949494', '#ece133', '#56b4e9']

* shape of theta hat transformation
#+BEGIN_SRC jupyter-python :session /jpy:localhost#8888:research
  import numpy as np
  import matplotlib as mpl
  import matplotlib.pyplot as plt
  from mpl_toolkits import mplot3d
  theta1 = np.linspace(0, 2*np.pi,100)
  theta2 = np.linspace(0, 2*np.pi,100)
  Th1, Th2 = np.meshgrid(theta1, theta2)
  eps = 0.1 # look at behavior for eps -> 0, inf, 1
  hatTh = np.arctan2(eps*np.sin(Th1) + np.sin(Th2),
                        eps*np.cos(Th1) + np.cos(Th2))
  fig = plt.figure()
  ax = plt.axes(projection='3d')
  ax.contourf3D(Th1, Th2, hatTh)
#+END_SRC

#+RESULTS:
:RESULTS:
: <matplotlib.contour.QuadContourSet at 0x7fab185156d0>
#+attr_org: :width 269
[[file:./.ob-jupyter/0daaab4b379fcfccadc0abac43f95d326436dd4b.png]]
:END:
